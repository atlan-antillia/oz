/******************************************************************************
 *
 * Copyright (c) 2019 Antillia.com TOSHIYUKI ARAI. ALL RIGHTS RESERVED.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer.
 *
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 *  VideoFileBackgroundSubtractorMOG2.cpp
 *
 *****************************************************************************/

//2017/12/15
//
// See: https://docs.opencv.org/3.1.0/d1/dc5/tutorial_background_subtraction.html
//

//2019/01/03
#include <opencv2/stitching.hpp>
//#include <oz++/ModuleFileName.h>

#include <oz++/motif/FileOpenDialog.h>
#include <oz++/opencv/OpenCVApplication.h>

#include <oz++/opencv/OpenCVVideoCaptureView.h>
#include <oz++/opencv/OpenCVScrolledImageView.h>

namespace OZ {

class MainView :public OpenCVVideoCaptureView {

private:
  ////////////////////////////////////////////////////////////////////////////////////////
  //Inner classes starts
  class VideoImageView :public OpenCVScrolledImageView {
  private:
    cv::Mat videoImage;
    
    cv::Mat& getMat()
    {
      return videoImage;
    }
    
  public:
    void display()
    {
      if (!videoImage.empty()) {
        show(videoImage);
      }
    }
    
  public:
    VideoImageView(View* parent, const char* name, Args& args)
    :OpenCVScrolledImageView(parent, name, args)
    {
      setKeepScrollBarPosition(true);
    }
    
    void setImage(cv::Mat image)
    {
      videoImage = image;
      invalidate();
    }
  };
  
  class ForegroundMaskImageView :public OpenCVScrolledImageView {
  private:
    cv::Mat  fgMaskMOG2;   //Foreground mask generated by cv::BackgroundSubtractorMOG2::apply method
    Ptr<cv::BackgroundSubtractorMOG2> 
             pMOG2;        //MOG2 Background subtractor
    
    cv::Mat& getMat()
    {
      return fgMaskMOG2;
    }
    
  public:
    void display()
    {
      show(fgMaskMOG2);
    }
    
  public:
    ForegroundMaskImageView(View* parent, const char* name, Args& args)
    :OpenCVScrolledImageView(parent, name, args)
    {
      pMOG2 = cv::createBackgroundSubtractorMOG2();
    }
    
    ~ForegroundMaskImageView()
    {
    }
    
    void generate(cv::Mat& frame)
    {
      pMOG2->apply(frame, fgMaskMOG2);
      invalidate();
      refresh();
    }
  };
  //Inner classes end.
  ////////////////////////////////////////////////////////////////////////////////////////
    
  StringT<char>             imageFile;
  SmartPtr<VideoImageView>  videoImage;
  SmartPtr<ForegroundMaskImageView> fgMaskImage;

  bool                      resized;
  
  void resize(Dimension w, Dimension h)
  {
    MenuBar* mbar = getMenuBar();
    int mh = mbar->height();
    h = h - mh;
    if (videoImage && fgMaskImage) {
      videoImage   -> reshape(2,      2,  w/2-2,    h-4);
      fgMaskImage  -> reshape(w/2+1,  2,  w/2-2,    h-4);
    }
  }


public:
  MainView(OpenCVApplication& applet, const char* name, Args& args)
  :OpenCVVideoCaptureView(applet, name, args)
  {
    try {
      BulletinBoard* bboard = getBulletinBoard();

      Args ar;
      videoImage = new VideoImageView(bboard, "cvwindow1", ar); 
      
      ar.reset();
      fgMaskImage = new ForegroundMaskImageView(bboard, "cvwindow2", ar); 

      sendConfigureEvent();
 
      resized = false;
      
    } catch (Exception& ex) {
      caught(ex);
    }
  }

  ~MainView()
  {
  }

  virtual void render()
  {
    cv::Mat frame;
    if (readVideoFrame(frame)) {
      if (!frame.empty() && videoImage && fgMaskImage) {
        videoImage  -> setImage(frame);
        videoImage  -> display();
        fgMaskImage -> generate(frame);
        fgMaskImage -> display();        
      }
    }    
  }
};
}

//
int main(int argc, char** argv) 
{
  try {
    const char* appClass = argv[0];
        
    OpenCVApplication applet(appClass, argc, argv);

    Args args;
    args.set(XmNwidth,  900);
    args.set(XmNheight, 400);
    args.set(XmNvideoDeviceIndex,  0);
    args.set(XmNcaptureAutoStart,  true);

    MainView view(applet, argv[0], args);
    view.realize();

    applet.run(&view, 20);
    
  } catch (OZ::Exception& ex) {
    caught(ex);
  }
  return 1;
}

